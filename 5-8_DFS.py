# DFS 메서드 정의
def dfs(graph, v, visited):
    visited[v] = True
    print(v, end=' ')

    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)

# 노드가 8개인 그래프
graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

# 방문 기록할 리스트
visited = [False] * 9

# 1번 노드부터 dfs 탐색
dfs(graph, 1, visited) # 1, 2, 7, 6, 8, 3, 4, 5

# 1 방문. push[1] [1]
#   1의 인접 노드 2, 3, 7. 2방문. push[2]  [1, 2]
#       2의 인접 노드 1, 7. 7방문. push[7] [1, 2, 7]
#           7의 인접 노드 (2), 6, 8. 6방문. push[6] [1, 2, 7, 6]
#               6의 인접 노드 7. 미방문 인접 노드가 없다. pop() [1, 2, 7]
#           7의 인접 노드 (2), (6), 8. 8방문. push[8] [1, 2, 7, 8]
#               8의 인접 노드 1, 7. 미방문 인접 노드가 없다. pop() [1, 2, 7]
#           7의 인접 노드 방문 완료. pop() [1, 2]
#       2의 인접 노드 방문 완료. pop() [1]
#   1의 인접 노드 (2), 3, (7). 3방문. push[3] [1, 3]
#       3의 인접 노드 (1), 4, 5. 4방문. push[4] [1, 3, 4]
#           4의 인접 노드 (3), 5. 5방문. push[5] [1, 3, 4, 5]
#               5의 인접 노드 방문 완료. pop() [1, 3, 4]
#           4의 인접 노드 방문 완료. pop() [1, 3]
#       3의 인접 노드 방문 완료. pop() [1]
#   1의 인접 노드 방문 완료. pop() []